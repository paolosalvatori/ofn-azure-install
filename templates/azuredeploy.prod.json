{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
     "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all the resources deployed by the template."
      }
    },
    "virtualNetworkName": {
      "defaultValue": "UbuntuVnet",
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network hosting the virtual machine."
      }
    },
    "virtualNetworkAddressPrefix": {
      "defaultValue": "10.0.0.0/16",
      "type": "string",
      "metadata": {
        "description": "The address prefix of the virtual network hosting the virtual machine."
      }
    },
    "subnetName": {
      "defaultValue": "DefaultSubnet",
      "type": "string",
      "metadata": {
        "description": "The name of the subnet hosting the virtual machine."
      }
    },
    "subnetAddressPrefix": {
      "defaultValue": "10.0.0.0/24",
      "type": "string",
      "metadata": {
        "description": "The address prefix of the subnet hosting the virtual machine."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('ofnprostore', uniquestring(resourceGroup().id))]",
      "metadata": {
        "description": "The unique DNS name for the storage account used to store the boot diagnostics logs of the virtual machine."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "OpenFoodNetworkVm",
      "metadata": {
        "description": "Name of the virtual machine. The name will be used as DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "metadata": {
        "description": "Specifies the size of the virtual machine."
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "Specifies the image publisher of the disk image used to create the virtual machine."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
     "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azadmin",
      "metadata": {
        "description": "Specifies the name of the administrator account of the virtual machine"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "diskStorageAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "The storage SKU for the OS and data disks of the virtual machine."
      }
    },
    "numDataDisks": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 64,
      "metadata": {
        "description": "This parameter allows the user to select the number of disks wanted"
      }
    },
    "osDiskSize": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The size in GB of the OS disk of the VM."
      }
    },
    "dataDiskSize": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM."
      }
    },
    "dataDiskCaching": {
      "type": "string",
      "defaultValue": "ReadWrite",
      "metadata": {
        "description": "Specifies the caching requirements for the data disks."
      }
    },
    "scriptFilePath": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/paolosalvatori/ofn-azure-install/master/scripts",
      "metadata": {
        "description": "The relative path of the script to download"
      }
    },
    "scriptFileNames": {
      "type": "array",
      "defaultValue": [
        "install-prod.sh"
      ],
      "metadata": {
        "description": "An array containing the name of the scripts to download from the URI specified by the scriptFilePath parameter."
      }
    },
    "deployLogAnalytics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether to deploy Log Analytics."
      }
    },
    "workspaceName": {
      "type": "string",
      "defaultValue": "[concat('workspace', uniquestring(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Log Analytics workspace"
      }
    },
    "workspaceSku": {
      "type": "string",
      "allowedValues": [
        "PerGB2018",
        "Free",
        "Standalone",
        "PerNode",
        "Standard",
        "Premium"
      ],
      "defaultValue": "PerGB2018",
      "metadata": {
        "description": "Pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
      }
    },
    "deployFrontDoor": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether to deploy Front Door."
      }
    },
    "frontDoorName": {
      "type": "string",
      "defaultValue": "[concat('frontdoor', uniquestring(resourceGroup().id))]",
      "minLength": 5,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the Azure Front Door which is globally unique. Min length: 5. Max length: 64"
      }
    },
    "frontDoorEnforceCertificateNameCheck": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests. - Enabled or Disabled"
      }
    },
    "frontDoorFrontendEndpoint": {
      "type": "object",
      "defaultValue": {
        "name": "MainFrontendEndpoint",
        "sessionAffinityEnabledState": "Disabled",
        "sessionAffinityTtlSeconds": 0
      },
      "metadata": {
        "description": "This parameter contains the name and properties of the frontend endpoint."
      }
    },
    "frontDoorBackendPool": {
      "type": "object",
      "defaultValue": {
        "name": "VmBackendPool",
        "loadBalancerName": "VmLoadBalancer"
      },
      "metadata": {
        "description": "This parameter contains the name and properties of the  Front Door Backend Pool"
      }
    },
    "frontDoorRoutingRule": {
      "type": "object",
      "defaultValue": {
        "name": "VmRoutingRule",
        "acceptedProtocols": [
          "Http",
          "Https"
        ],
        "patternsToMatch": [
          "/*"
        ],
        "customForwardingPath": "/",
        "forwardingProtocol": "HttpsOnly",
        "cacheConfiguration": {
          "queryParameterStripDirective": "StripNone",
          "dynamicCompression": "Enabled"
        }
      },
      "metadata": {
        "description": "This parameter contains the name and properties of the routing rule."
      }
    },
    "frontDoorHealthProbeSettings": {
      "type": "object",
      "defaultValue": {
        "name": "VmHealthProbeSettings",
        "intervalInSeconds": 30,
        "path": "/status-0123456789abcdef",
        "protocol": "Https"
      },
      "metadata": {
        "description": "This parameter contains the name and properties of the health probe settings."
      }
    },
    "deployWaf": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether to deploy a global WAF policy in Front Door."
      }
    },
    "wafPolicyName": {
      "type": "string",
      "defaultValue": "OpenFoodNetworkWAF",
      "metadata": {
        "description": "The name of the WAF policy"
      }
    },
    "wafMode": {
      "type": "string",
      "allowedValues": [
        "Detection",
        "Prevention"
      ],
      "defaultValue": "Detection",
      "metadata": {
        "description": "Describes if it is in detection mode or prevention mode at policy level."
      }
    },
    "httpPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Specifies the HTTP port used by the Open Foor Network solution."
      }
    },
    "httpsPort": {
      "type": "int",
      "defaultValue": 443,
      "metadata": {
        "description": "Specifies the HTTPS port used by the Open Foor Network solution."
      }
    },
    "deployPostgreSQL": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether to deploy Azure Database for PostgreSQL."
      }
    },
    "serverName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), uniquestring(resourceGroup().id))]",
      "minLength": 1,
      "metadata": {
        "description": "Specifies the name of the PostgreSQL server."
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "open_food_network_prod",
      "minLength": 1,
      "metadata": {
        "description": "Specifies the name of the PostgreSQL database."
      }
    },
    "administratorLogin": {
      "type": "string",
      "defaultValue": "ofn",
      "minLength": 1,
      "metadata": {
        "description": "Specifies the login name of the database administrator."
      }
    },
    "administratorLoginPassword": {
      "type": "securestring",
      "defaultValue": "OfnF00d!",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Specifies the password of the database administrator."
      }
    },
    "databaseSkuCapacity": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        2,
        4,
        8,
        16,
        32
      ],
      "metadata": {
        "description": "Specifies the compute capacity in vCores (2,4,8,16,32) of the Azure Database for PostgreSQL."
      }
    },
    "databaseSkuName": {
      "type": "string",
      "defaultValue": "GP_Gen5_2",
      "allowedValues": [
        "GP_Gen5_2",
        "GP_Gen5_4",
        "GP_Gen5_8",
        "GP_Gen5_16",
        "GP_Gen5_32",
        "MO_Gen5_2",
        "MO_Gen5_4",
        "MO_Gen5_8",
        "MO_Gen5_16",
        "MO_Gen5_32",
        "B_Gen5_1",
        "B_Gen5_2"
      ],
      "metadata": {
        "description": "Specifies the SKU name of the Azure Database for PostgreSQL."
      }
    },
    "databaseSkuSizeMB": {
      "type": "int",
      "allowedValues": [
        102400,
        51200
      ],
      "defaultValue": 51200,
      "metadata": {
        "description": "Specifies the SKU size of the Azure Database for PostgreSQL."
      }
    },
    "databaseSkuTier": {
      "type": "string",
      "defaultValue": "GeneralPurpose",
      "allowedValues": [
        "GeneralPurpose",
        "MemoryOptimized",
        "Basic"
      ],
      "metadata": {
        "description": "Specifies the pricing tier of the Azure Database for PostgreSQL."
      }
    },
    "postgresqlVersion": {
      "type": "string",
      "allowedValues": [
        "9.5",
        "9.6",
        "10.10",
        "11.5"
      ],
      "defaultValue": "9.5",
      "metadata": {
        "description": "PostgreSQL version"
      }
    },
    "databaseskuFamily": {
      "type": "string",
      "defaultValue": "Gen5",
      "metadata": {
        "description": "Specifies the SLU familiy of the Azure Database for PostgreSQL."
      }
    },
    "databaseFirewallStartIpAddress": {
      "type": "string",
      "defaultValue": "0.0.0.0",
      "metadata": {
        "description": "Specifies the start IP address of the server firewall rule. Must be IPv4 format."
      }
    },
    "databaseFirewallEndIpAddress": {
      "type": "string",
      "defaultValue": "255.255.255.255",
      "metadata": {
        "description": "Specifies the end IP address of the server firewall rule. Must be IPv4 format."
      }
    },
    "databaseCharset": {
      "type": "string",
      "defaultValue": "utf8",
      "metadata": {
        "description": "Specifies the charset of the database."
      }
    },
    "databaseCollation": {
      "type": "string",
      "defaultValue": "English_United States.1252",
      "metadata": {
        "description": "Specifies the collation of the database."
      }
    },
    "postgreSQLPrivateEndpointName": {
      "type": "string",
      "defaultValue": "PostgreSQLPrivateEndpoint",
      "metadata": {
        "description": "Specifies the name of the private link to Azure Database for PostgreSQL."
      }
    }
  },
  "variables": {
    "nicName": "[concat(parameters('vmName'), 'Nic')]",
    "nsgName": "[concat(parameters('subnetName'), 'SubnetNsg')]",
    "publicIPAddressName": "[concat(parameters('vmName'), 'PublicIp')]",
    "publicIPAddressType": "Dynamic",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "publicIpId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
    "nicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "vmId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
    "frontDoorId": "[resourceId('Microsoft.Network/frontdoors', parameters('frontDoorName'))]",
    "frontDoorBackendPoolId": "[concat(variables('frontDoorId'), '/backendPools/', parameters('frontDoorBackendPool').name)]",
    "frontDoorHealthProbeSettingsId": "[concat(variables('frontDoorId'), '/healthProbeSettings/', parameters('frontDoorHealthProbeSettings').name)]",
    "frontDoorLoadBalancerId": "[concat(variables('frontDoorId'), '/loadBalancingSettings/', parameters('frontDoorBackendPool').loadBalancerName)]",
    "frontDoorFrontedEndpointId": "[concat(variables('frontDoorId'), '/frontendEndpoints/', parameters('frontDoorFrontendEndpoint').name)]",
    "wafPolicyId": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      },
      "provisionVMAgent": true
    },
    "postgreSQLServerId": "[resourceId('Microsoft.DBforPostgreSQL/servers', parameters('serverName'))]",
    "privateDnsZoneName": "privatelink.postgres.database.azure.com",
    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
    "privateEndpointId": "[resourceId('Microsoft.Network/privateEndpoints', parameters('postgreSQLPrivateEndpointName'))]",
    "customScriptId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'CustomScript')]",
    "omsAgentForLinuxId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LogAnalytics')]"
  },
  "resources": [
    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSshInbound",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "22",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHttpInbound",
            "properties": {
              "priority": 110,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "[parameters('httpPort')]",
              "protocol": "Tcp",
              "sourceAddressPrefix": "[if(parameters('deployFrontDoor'), 'AzureFrontDoor.Backend', '*')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHttspInbound",
            "properties": {
              "priority": 120,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "[parameters('httpsPort')]",
              "protocol": "Tcp",
              "sourceAddressPrefix": "[if(parameters('deployFrontDoor'), 'AzureFrontDoor.Backend', '*')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-11-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('virtualNetworkAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgId')]"
              },
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('publicIpId')]",
        "[variables('vnetId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('storageAccountId')]",
        "[variables('nicId')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('vmName'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": "[parameters('osDiskSize')]",
            "managedDisk": {
              "storageAccountType": "[parameters('diskStorageAccountType')]"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[parameters('numDataDisks')]",
              "input": {
                "caching": "[parameters('dataDiskCaching')]",
                "diskSizeGB": "[parameters('dataDiskSize')]",
                "lun": "[copyIndex('dataDisks')]",
                "name": "[concat(parameters('vmName'),'-DataDisk',copyIndex('dataDisks'))]",
                "createOption": "Empty",
                "managedDisk": {
                  "storageAccountType": "[parameters('diskStorageAccountType')]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('storageAccountId')).primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployLogAnalytics')]",
      "apiVersion": "2019-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/LogAnalytics')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vmId')]",
        "[variables('workspaceId')]",
        "[variables('customScriptId')]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "OmsAgentForLinux",
        "typeHandlerVersion": "1.9",
        "settings": {
          "workspaceId": "[reference(variables('workspaceId'), '2015-11-01-preview').customerId]",
          "stopOnMultipleConnections": false
        },
        "protectedSettings": {
          "workspaceKey": "[listKeys(variables('workspaceId'),'2015-11-01-preview').primarySharedKey]"
        }
      }
    },
    {
      "condition": "[parameters('deployLogAnalytics')]",
      "apiVersion": "2019-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/DependencyAgent')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vmId')]",
        "[variables('workspaceId')]",
        "[variables('customScriptId')]",
        "[variables('omsAgentForLinuxId')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
        "type": "DependencyAgentLinux",
        "typeHandlerVersion": "9.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
        }
      }
    },
    {
      "apiVersion": "2019-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'), '/CustomScript')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vmId')]",
        "[variables('postgreSQLServerId')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "skipDos2Unix": false,
          "timestamp": 123456789,
          "copy": [
            {
              "name": "fileUris",
              "count": "[length(parameters('scriptFileNames'))]",
              "input": "[concat(parameters('scriptFilePath'), '/', parameters('scriptFileNames')[copyIndex('fileUris')])]"
            }
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('bash ',  parameters('scriptFileNames')[0], ' ', base64(concat('{ \"deployPostgreSQL\": ', toLower(string(parameters('deployPostgreSQL'))), ', \"serverName\": \"', parameters('serverName'), '\", \"databaseName\": \"', parameters('databaseName'), '\", \"administratorLogin\": \"', parameters('administratorLogin'), '\", \"administratorLoginPassword\": \"' , parameters('administratorLoginPassword'), '\", \"adminUsername\": \"', parameters('adminUsername'), '\" }')))]"
        }
      }
    },
    {
      "condition": "[parameters('deployLogAnalytics')]",
      "apiVersion": "2015-11-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('workspaceSku')]"
        }
      },
      "resources": [
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "Kern",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxSyslog",
          "properties": {
            "syslogName": "kern",
            "syslogSeverities": [
              {
                "severity": "emerg"
              },
              {
                "severity": "alert"
              },
              {
                "severity": "crit"
              },
              {
                "severity": "err"
              },
              {
                "severity": "warning"
              }
            ]
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "Syslog",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxSyslog",
          "properties": {
            "syslogName": "syslog",
            "syslogSeverities": [
              {
                "severity": "emerg"
              },
              {
                "severity": "alert"
              },
              {
                "severity": "crit"
              },
              {
                "severity": "err"
              },
              {
                "severity": "warning"
              }
            ]
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "User",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxSyslog",
          "properties": {
            "syslogName": "user",
            "syslogSeverities": [
              {
                "severity": "emerg"
              },
              {
                "severity": "alert"
              },
              {
                "severity": "crit"
              },
              {
                "severity": "err"
              },
              {
                "severity": "warning"
              }
            ]
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "SampleSyslogCollection1",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxSyslogCollection",
          "properties": {
            "state": "Enabled"
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "DiskPerfCounters",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "% Used Inodes"
              },
              {
                "counterName": "Free Megabytes"
              },
              {
                "counterName": "% Used Space"
              },
              {
                "counterName": "Disk Transfers/sec"
              },
              {
                "counterName": "Disk Reads/sec"
              },
              {
                "counterName": "Disk Writes/sec"
              },
              {
                "counterName": "Disk Read Bytes/sec"
              },
              {
                "counterName": "Disk Write Bytes/sec"
              }
            ],
            "objectName": "Logical Disk",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "ProcessorPerfCounters",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "% Processor Time"
              },
              {
                "counterName": "% User Time"
              },
              {
                "counterName": "% Privileged Time"
              },
              {
                "counterName": "% IO Wait Time"
              },
              {
                "counterName": "% Idle Time"
              },
              {
                "counterName": "% Interrupt Time"
              }
            ],
            "objectName": "Processor",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "ProcessPerfCounters",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "% User Time"
              },
              {
                "counterName": "% Privileged Time"
              },
              {
                "counterName": "Used Memory"
              },
              {
                "counterName": "Virtual Shared Memory"
              }
            ],
            "objectName": "Process",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "SystemPerfCounters",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "Processes"
              }
            ],
            "objectName": "System",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "NetworkPerfCounters",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "Total Bytes Transmitted"
              },
              {
                "counterName": "Total Bytes Received"
              },
              {
                "counterName": "Total Bytes"
              },
              {
                "counterName": "Total Packets Transmitted"
              },
              {
                "counterName": "Total Packets Received"
              },
              {
                "counterName": "Total Rx Errors"
              },
              {
                "counterName": "Total Tx Errors"
              },
              {
                "counterName": "Total Collisions"
              }
            ],
            "objectName": "Network",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "MemorydataSources",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceObject",
          "properties": {
            "performanceCounters": [
              {
                "counterName": "Available MBytes Memory"
              },
              {
                "counterName": "% Available Memory"
              },
              {
                "counterName": "Used Memory MBytes"
              },
              {
                "counterName": "% Used Memory"
              }
            ],
            "objectName": "Memory",
            "instanceName": "*",
            "intervalSeconds": 10
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "type": "dataSources",
          "name": "SampleLinuxPerfCollection1",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "kind": "LinuxPerformanceCollection",
          "properties": {
            "state": "Enabled"
          }
        },
        {
          "apiVersion": "2015-11-01-preview",
          "location": "[parameters('location')]",
          "name": "[concat('VMInsights', '(', parameters('workspaceName'),')')]",
          "type": "Microsoft.OperationsManagement/solutions",
          "dependsOn": [
            "[variables('workspaceId')]"
          ],
          "properties": {
            "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          },
          "plan": {
            "name": "[concat('VMInsights', '(', parameters('workspaceName'),')')]",
            "publisher": "Microsoft",
            "product": "[Concat('OMSGallery/', 'VMInsights')]",
            "promotionCode": ""
          }
        }
      ]
    },
    {
      "condition": "[and(parameters('deployFrontDoor'), parameters('deployWaf'))]",
      "apiVersion": "2019-03-01",
      "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
      "name": "[parameters('wafPolicyName')]",
      "location": "global",
      "properties": {
        "policySettings": {
          "mode": "[parameters('wafMode')]",
          "enabledState": "Enabled"
        },
        "managedRules": {
          "managedRuleSets": [
            {
              "ruleSetType": "DefaultRuleSet",
              "ruleSetVersion": "1.0"
            }
          ]
        }
      }
    },
    {
      "condition": "[parameters('deployFrontDoor')]",
      "type": "Microsoft.Network/frontdoors",
      "apiVersion": "2019-05-01",
      "name": "[parameters('frontDoorName')]",
      "location": "global",
      "dependsOn": [
        "[variables('vmId')]",
        "[variables('wafPolicyId')]"
      ],
      "properties": {
        "backendPoolsSettings": {
          "enforceCertificateNameCheck": "[parameters('frontDoorEnforceCertificateNameCheck')]",
          "sendRecvTimeoutSeconds": 120
        },
        "enabledState": "Enabled",
        "resourceState": "Enabled",
        "backendPools": [
          {
            "name": "[parameters('frontDoorBackendPool').name]",
            "properties": {
              "backends": [
                {
                  "address": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]",
                  "httpPort": "[parameters('httpPort')]",
                  "httpsPort": "[parameters('httpsPort')]",
                  "priority": 1,
                  "weight": 100,
                  "backendHostHeader": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
                }
              ],
              "healthProbeSettings": {
                "id": "[variables('frontDoorHealthProbeSettingsId')]"
              },
              "loadBalancingSettings": {
                "id": "[variables('frontDoorLoadBalancerId')]"
              }
            }
          }
        ],
        "healthProbeSettings": [
          {
            "name": "[parameters('frontDoorHealthProbeSettings').name]",
            "properties": {
              "intervalInSeconds": "[parameters('frontDoorHealthProbeSettings').intervalInSeconds]",
              "path": "[parameters('frontDoorHealthProbeSettings').path]",
              "protocol": "[parameters('frontDoorHealthProbeSettings').protocol]"
            }
          }
        ],
        "frontendEndpoints": [
          {
            "name": "[parameters('frontDoorFrontendEndpoint').name]",
            "properties": {
              "hostName": "[concat(toLower(parameters('frontDoorName')), '.azurefd.net')]",
              "sessionAffinityEnabledState": "[parameters('frontDoorFrontendEndpoint').sessionAffinityEnabledState]",
              "sessionAffinityTtlSeconds": "[parameters('frontDoorFrontendEndpoint').sessionAffinityTtlSeconds]",
              "resourceState": "Enabled",
              "webApplicationFirewallPolicyLink": {
                "id": "[if(and(parameters('deployFrontDoor'), parameters('deployWaf')), variables('wafPolicyId'), json('null'))]"
              }
            }
          }
        ],
        "loadBalancingSettings": [
          {
            "name": "[parameters('frontDoorBackendPool').loadBalancerName]",
            "properties": {
              "additionalLatencyMilliseconds": 0,
              "sampleSize": 4,
              "successfulSamplesRequired": 2
            }
          }
        ],
        "routingRules": [
          {
            "name": "[parameters('frontDoorRoutingRule').name]",
            "properties": {
              "frontendEndpoints": [
                {
                  "id": "[variables('frontDoorFrontedEndpointId')]"
                }
              ],
              "acceptedProtocols": "[parameters('frontDoorRoutingRule').acceptedProtocols]",
              "patternsToMatch": "[parameters('frontDoorRoutingRule').patternsToMatch]",
              "routeConfiguration": {
                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                "customForwardingPath": "/",
                "forwardingProtocol": "[parameters('frontDoorRoutingRule').forwardingProtocol]",
                "backendPool": {
                  "id": "[variables('frontDoorBackendPoolId')]"
                },
                "cacheConfiguration": "[parameters('frontDoorRoutingRule').cacheConfiguration]"
              }
            }
          }
        ],
        "friendlyName": "[parameters('frontDoorName')]"
      }
    },
    {
      "condition": "[parameters('deployFrontDoor')]",
      "type": "Microsoft.Network/frontdoors/providers/diagnosticsettings",
      "name": "[concat(parameters('frontDoorName'), '/Microsoft.Insights/service')]",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('frontDoorId')]",
        "[variables('workspaceId')]"
      ],
      "properties": {
        "workspaceId": "[variables('workspaceId')]",
        "logs": [
          {
            "category": "FrontdoorAccessLog",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 0
            }
          },
          {
            "category": "FrontdoorWebApplicationFirewallLog",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 0
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "timeGrain": "PT1M",
            "enabled": true,
            "retentionPolicy": {
              "enabled": false,
              "days": 0
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "apiVersion": "2017-12-01",
      "type": "Microsoft.DBforPostgreSQL/servers",
      "location": "[parameters('location')]",
      "name": "[parameters('serverName')]",
      "sku": {
        "name": "[parameters('databaseSkuName')]",
        "tier": "[parameters('databaseSkuTier')]",
        "capacity": "[parameters('databaseSkucapacity')]",
        "size": "[parameters('databaseSkuSizeMB')]",
        "family": "[parameters('databaseskuFamily')]"
      },
      "properties": {
        "createMode": "Default",
        "version": "[parameters('postgresqlVersion')]",
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "storageMB": "[parameters('databaseSkuSizeMB')]"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[variables('postgreSQLServerId')]"
          ],
          "location": "[parameters('location')]",
          "name": "[concat(parameters('serverName'),'Firewall')]",
          "properties": {
            "startIpAddress": "[parameters('databaseFirewallStartIpAddress')]",
            "endIpAddress": "[parameters('databaseFirewallEndIpAddress')]"
          }
        },
        {
          "name": "[parameters('databaseName')]",
          "type": "databases",
          "apiVersion": "2017-12-01",
          "properties": {
            "charset": "[parameters('databaseCharset')]",
            "collation": "[parameters('databaseCollation')]"
          },
          "dependsOn": [
            "[variables('postgreSQLServerId')]"
          ]
        }
      ]
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZoneName')]",
      "location": "global",
      "properties": {
        "maxNumberOfRecordSets": 25000,
        "maxNumberOfVirtualNetworkLinks": 1000,
        "maxNumberOfVirtualNetworkLinksWithRegistration": 100
      }
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZoneName'), '/', parameters('serverName'))]",
      "dependsOn": [
        "[variables('privateDnsZoneId')]",
        "[variables('privateEndpointId')]"
      ],
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(variables('privateEndpointId'), '2020-04-01').customDnsConfigs[0].ipAddresses[0]]"
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "type": "Microsoft.Network/privateDnsZones/SOA",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZoneName'), '/@')]",
      "dependsOn": [
        "[variables('privateDnsZoneId')]"
      ],
      "properties": {
        "ttl": 3600,
        "soaRecord": {
          "email": "azureprivatedns-host.microsoft.com",
          "expireTime": 2419200,
          "host": "azureprivatedns.net",
          "refreshTime": 3600,
          "retryTime": 300,
          "serialNumber": 1,
          "minimumTtl": 300
        }
      }
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZoneName'), '/linkto', toLower(parameters('virtualNetworkName')))]",
      "location": "global",
      "dependsOn": [
        "[variables('privateDnsZoneId')]",
        "[variables('vnetId')]"
      ],
      "properties": {
        "registrationEnabled": true,
        "virtualNetwork": {
          "id": "[variables('vnetId')]"
        }
      }
    },
    {
      "condition": "[parameters('deployPostgreSQL')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-04-01",
      "name": "[parameters('postgreSQLPrivateEndpointName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetId')]",
        "[variables('postgreSQLServerId')]"
      ],
      "properties": {
        "privateLinkServiceConnections": [
          {
            "name": "[parameters('postgreSQLPrivateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[variables('postgreSQLServerId')]",
              "groupIds": [
                "postgresqlServer"
              ]
            }
          }
        ],
        "manualPrivateLinkServiceConnections": [
        ],
        "subnet": {
          "id": "[variables('subnetId')]"
        },
        "customDnsConfigs": [
          {
            "fqdn": "[concat(parameters('serverName'), '.postgres.database.azure.com')]"
          }
        ]
      }
    }
  ],
  "outputs": {}
}